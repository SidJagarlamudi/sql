2

SELECT department.name, COUNT(course.deptid) AS '# of courses'
FROM course LEFT JOIN department ON course.deptid = department.id
GROUP BY name
HAVING COUNT(course.deptid)
ORDER BY COUNT(course.deptid);

3

SELECT course.name, COUNT(studentcourse.courseid) AS '# of students'
FROM course LEFT JOIN studentcourse ON studentcourse.courseid = course.id
GROUP BY name
HAVING COUNT(studentcourse.courseid) 
ORDER BY COUNT(studentcourse.courseid) desc, course.name;

4

SELECT course.name
FROM   course LEFT JOIN facultycourse ON facultycourse.courseid = course.id
WHERE  facultyid IS NULL

5

SELECT course.name, COUNT(studentcourse.courseid) AS '# of students' 
FROM course 
  LEFT JOIN studentcourse ON studentcourse.courseid = course.id 
  LEFT JOIN facultycourse ON facultycourse.courseid = course.id 
WHERE facultyid IS NULL 
GROUP BY name 
HAVING COUNT(studentcourse.courseid) 
ORDER BY COUNT(studentcourse.courseid) desc, course.name;

6

select COUNT(distinct studentid) AS Students, EXTRACT(YEAR FROM startdate) AS Year 
FROM studentcourse
GROUP BY EXTRACT(YEAR FROM startdate);

7

SELECT studentcourse.startdate AS 'StartDate', COUNT(DISTINCT studentcourse.studentid) AS 'Total Number of Students'
FROM studentcourse
WHERE MONTH(studentcourse.startdate) = 8
GROUP BY StartDate
ORDER BY StartDate, 'Total Number of Students';

8

SELECT student.firstname, student.lastname, COUNT(studentcourse.courseid) AS 'courses'
FROM studentcourse
RIGHT JOIN student ON student.id = studentcourse.studentid
LEFT JOIN course ON course.id = studentcourse.courseid
WHERE course.deptid = student.majorid
GROUP BY student.firstname, student.lastname
ORDER BY courses DESC, student.firstname, student.lastname;

9

SELECT student.firstname AS 'FirstName', student.lastname AS 'LastName', ROUND(AVG(studentcourse.progress),1) as 
'AverageProgress'
FROM student LEFT outer JOIN studentcourse ON studentcourse.studentid = student.id
GROUP BY student.lastname, student.firstname
HAVING AVG(studentcourse.progress) < 50
ORDER BY AverageProgress desc, FirstName, LastName;

10

Select course.name, ROUND(AVG(studentcourse.progress),1) as 
'AverageProgress'
from course left join studentcourse ON studentcourse.courseid = course.id
group by course.name
Order by AverageProgress DESC, course.name;

11

Select course.name AS 'Name', ROUND(AVG(studentcourse.progress),1) as 'AverageProgress'
from course left join studentcourse ON studentcourse.courseid = course.id
Group BY Name
Order by AverageProgress desc
LIMIT 1;

12

select faculty.firstname, faculty.lastname, ROUND(AVG(studentcourse.progress),1) as 'AverageProgress'
from faculty 
left join facultycourse ON facultycourse.facultyid = faculty.id
left join studentcourse ON studentcourse.courseid = facultycourse.courseid
Group by firstname
Order by AverageProgress desc, firstname, lastname;

13

SELECT faculty.firstname, faculty.lastname, ROUND(AVG(studentcourse.progress),1) AS 'AverageProgress'
FROM faculty
LEFT JOIN facultycourse ON facultycourse.facultyid = faculty.id
LEFT JOIN studentcourse ON studentcourse.courseid = facultycourse.courseid
GROUP BY faculty.firstname, faculty.lastname
HAVING AverageProgress >= 62.82
ORDER BY AverageProgress DESC, faculty.firstname, faculty.lastname;

14

SELECT student.firstname, student.lastname, (CASE
WHEN MIN(progress)<40 THEN 'F'
WHEN MIN(progress)<50 THEN 'D'
WHEN MIN(progress)<60 THEN 'C'
WHEN MIN(progress)<70 THEN 'B'
WHEN MIN(progress)>=70 THEN 'A'
END) AS MinimumGrade, (CASE
WHEN MAX(progress)<40 THEN 'F'
WHEN MAX(progress)<50 THEN 'D'
WHEN MAX(progress)<60 THEN 'C'
WHEN MAX(progress)<70 THEN 'B'
WHEN MAX(progress)>=70 THEN 'A'
END) AS MaximumGrade
FROM student left join studentcourse ON studentcourse.studentid = student.id
Group by student.firstname, student.lastname
Order by MinimumGrade desc, MaximumGrade desc, student.firstname, student.lastname


